""" Редактор цен и наличия """
from django.core.management.base import BaseCommand
from catalog.models import *
import decimal


class Command(BaseCommand):
    args = ''
    help = ''
    
    def handle(self, *args, **options):
        pass

cts = [
    # "1. Сварочное оборудование",
    # "8. Ручная дуговая сварка",
    # "90. Точечная сварка",
    # "12. Воздушно-плазменная резка",
    # "11. Аргонодуговая сварка",
    "99. Механизмы подачи проволоки",
    # "9. Полуавтоматическая сварка",
    # "106. Автоматическая сварка",
    # "3. Газосварочное оборудование",
    "40. Редукторы",
    "98. Двухступенчатые",
    "97. Сетевые",
    "96. Редукторы высокого давления",
    "95. Редукторы для сжатого воздуха",
    "94. Гелиевые",
    "93. Азотные",
    "85. Водородные",
    "46. Аргоновые",
    "45. Углекислотные",
    "44.  Ацетиленовые",
    "42. Пропановые",
    "41. Кислородные",
    "47. Резаки газокислородные",
    "53. Комплектующие, запасные части",
    "52. Резаки комбинированные",
    "51. Резаки трехтрубные ацетиленовые",
    "50. Резаки инжекторные ацетиленовые",
    "49. Резаки трехтрубные пропановые",
    "48. Резаки инжектроные пропановые ",
    "54. Горелки сварочные",
    "58. Комплектующие, запасные части ",
    "57. Горелки комбинированные ",
    "56. Горелки ацетиленовые ",
    "55. Горелки пропановые ",
    "59. Горелки газовоздушные",
    "64. Горелки KRASNIY STAKAN ",
    "63. Комплектующие для горелок ",
    "62. Горелки специальные",
    "61. Горелки кабельные",
    "60. Горелки кровельные",
    "65. Затворы предохранительные",
    "67. Клапаны обратные ",
    "66. Затворы предохранительные ",
    "68. Регуляторы расхода газа",
    "88. Пропановые ",
    "87. Кислородные",
    "86. Ацетиленовые",
    "75. Комплектующие, запасные части",
    "74. Подогреватели газа ",
    "73. Регуляторы комбинированные ",
    "72. Гелиевые регуляторы ",
    "71. Азотные регуляторы ",
    "70. Аргоновые регуляторы ",
    "69. Углекислотные регуляторы ",
    "82. Устройства газосбережения",
    "84. Устройства для регуляторов аргона",
    "83. Комплекты для сварки и резки",
    "100. Быстросъемные соединители",
    "4. Расходные материалы",
    "14. Электроды",
    "35. Наплавка",
    "34. По чугуну",
    "31. По металлу",
    "28. Нержавейка",
    "25. Алюминий",
    "18. Проволока",
    "32. По металлу",
    "29. Нержавейка",
    "23. Прутки",
    "33. По металлу",
    "30. Нержавейка",
    "27. Алюминий",
    "24. Флюс",
    "7. Сопутствующие товары",
    # "92. Пусковые устройства",
    # "91. Пускозарядные устройства",
    "38. ПДУ",
    # "37. Тележки",
    # "13. Блоки охлаждения",
    "102. Дополнительное оборудование",
    # "103. Электропечи",
    "101. Термопеналы",
    "107. Прочее",
    "2. Горелки",
    # "16. MIG/MAG",
    # "15. TIG",
    "19. Генераторы",
    # "78. Бензиновые",
    "22. Газовые",
    "21. Портативные",
    "20. Инверторные",
    "5. Химия для сварки",
    "17. Кабели",
    "36. Рукава",
    "77. Сварочные маски",
    # "104. Отключённые категории",
    "6. Приборы для выжигания",
    "10. Механизмы подачи проволоки",
    "43. Пропановые бытовые",
    "76. СИЗ",
    "81. Пропановые баллонные",
    "80. Кислородные баллонные",
    "79. Ацетиленовые баллонные",
    "105. Сварка под слоем флюса",
    # "89. Плазменная резка",
    "26. Алюминий",
    "39. Комплекты дооснащения",
]
brands = [
    # "FUBAG",
    # "Редиус",
    # "ESAB",
    # "M-WELD",
    # "Форсаж",
    "Ресанта",
    # "MEGMEET",
    # "PlasmaTEC",
    # "Сварог",
    # "Кедр",
    # "KOBELCO",
    # "FARINA",
    # "TELWIN",
    # "EUROLUX",
    # "HUTER",
    # "Главный сварщик",
    # "ASOIK",
    # "Химавангард",
    # "Оливер",
    # "GCE",
    # "Arrow Solutions",
    # "Krasniy Stakan",
    # "Aurora",
    # "Integral",
    # "Denzel",
    # "Lincoln Electric",
    # "MONOLITH",
    # "EWM",
    # "SCOMES",
]


prods_qs = ProductModel.objects.all()
prices_qs = PriceModel.objects.all()

cats_qs = CategoryModel.objects.all()
brands_qs = BrandProductModel.objects.all()



# Генерирует списки в терминале
# for brand_qs in brands_qs:
#     print('# "' + str(brand_qs) + '",')

# for ct_qs in cats_qs:
#     print('# "' + str(ct_qs) + '",')



for prod_qs in prods_qs:
    
    print(prod_qs.name, '\t', prod_qs.category, '\t', str(prod_qs.brand))

    if str(prod_qs.brand) in brands or str(prod_qs.category) in cts:
        

        price_qs = prices_qs.filter(product=prod_qs)
        count = 0
        for price in price_qs:
            count += 1
            price_qs.filter(price=price.price).update(quantity=1, status='stock')
            print(
                count, '\t',
                price.price, '\t',
                price.quantity , '\t',
                price.status
                )

    # Проверка на наличие цен в товарах если тот активирован.
    # price_qs = prices_qs.filter(product=prod_qs)
    # if len(price_qs) < 9 and prod_qs.activated == True:
    #     print(prod_qs.id, '\t', prod_qs.name, '\t', prod_qs.category, '\t', str(prod_qs.brand))